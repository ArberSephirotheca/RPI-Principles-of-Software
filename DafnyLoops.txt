function pow10(n: nat) : nat
{ if n == 0 then 1 else 10*pow10(n-1) }

method TrailingZeros(x: int) returns (zeros: int, y: int)
  requires x != 0
  ensures x == y*pow10(zeros) && y%10 != 0
{
  zeros := 0;
  y := x;
  
  while(y%10 == 0)
    invariant x > pow10(zeros)
  {
    y := y/10;
    zeros := zeros + 1;
  }
  
}

